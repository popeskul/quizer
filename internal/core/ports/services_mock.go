// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/popeskul/quizer/internal/core/ports (interfaces: Services,QuizService)
//
// Generated by this command:
//
//	mockgen -destination=services_mock.go -package=ports github.com/popeskul/quizer/internal/core/ports Services,QuizService
//

// Package ports is a generated GoMock package.
package ports

import (
	context "context"
	reflect "reflect"

	quiz "github.com/popeskul/quizer/internal/core/domain/quiz"
	gomock "go.uber.org/mock/gomock"
)

// MockServices is a mock of Services interface.
type MockServices struct {
	ctrl     *gomock.Controller
	recorder *MockServicesMockRecorder
}

// MockServicesMockRecorder is the mock recorder for MockServices.
type MockServicesMockRecorder struct {
	mock *MockServices
}

// NewMockServices creates a new mock instance.
func NewMockServices(ctrl *gomock.Controller) *MockServices {
	mock := &MockServices{ctrl: ctrl}
	mock.recorder = &MockServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServices) EXPECT() *MockServicesMockRecorder {
	return m.recorder
}

// QuizService mocks base method.
func (m *MockServices) QuizService() QuizService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuizService")
	ret0, _ := ret[0].(QuizService)
	return ret0
}

// QuizService indicates an expected call of QuizService.
func (mr *MockServicesMockRecorder) QuizService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuizService", reflect.TypeOf((*MockServices)(nil).QuizService))
}

// MockQuizService is a mock of QuizService interface.
type MockQuizService struct {
	ctrl     *gomock.Controller
	recorder *MockQuizServiceMockRecorder
}

// MockQuizServiceMockRecorder is the mock recorder for MockQuizService.
type MockQuizServiceMockRecorder struct {
	mock *MockQuizService
}

// NewMockQuizService creates a new mock instance.
func NewMockQuizService(ctrl *gomock.Controller) *MockQuizService {
	mock := &MockQuizService{ctrl: ctrl}
	mock.recorder = &MockQuizServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuizService) EXPECT() *MockQuizServiceMockRecorder {
	return m.recorder
}

// GetQuiz mocks base method.
func (m *MockQuizService) GetQuiz(arg0 context.Context) (*quiz.Quiz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuiz", arg0)
	ret0, _ := ret[0].(*quiz.Quiz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuiz indicates an expected call of GetQuiz.
func (mr *MockQuizServiceMockRecorder) GetQuiz(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuiz", reflect.TypeOf((*MockQuizService)(nil).GetQuiz), arg0)
}

// SubmitAnswers mocks base method.
func (m *MockQuizService) SubmitAnswers(arg0 context.Context, arg1 map[string]string) (quiz.QuizResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitAnswers", arg0, arg1)
	ret0, _ := ret[0].(quiz.QuizResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitAnswers indicates an expected call of SubmitAnswers.
func (mr *MockQuizServiceMockRecorder) SubmitAnswers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitAnswers", reflect.TypeOf((*MockQuizService)(nil).SubmitAnswers), arg0, arg1)
}
