// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/popeskul/quizer/internal/core/ports (interfaces: Repository,QuizRepository)
//
// Generated by this command:
//
//	mockgen -destination=repositories_mock.go -package=ports github.com/popeskul/quizer/internal/core/ports Repository,QuizRepository
//

// Package ports is a generated GoMock package.
package ports

import (
	context "context"
	reflect "reflect"

	quiz "github.com/popeskul/quizer/internal/core/domain/quiz"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// QuizRepository mocks base method.
func (m *MockRepository) QuizRepository() QuizRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuizRepository")
	ret0, _ := ret[0].(QuizRepository)
	return ret0
}

// QuizRepository indicates an expected call of QuizRepository.
func (mr *MockRepositoryMockRecorder) QuizRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuizRepository", reflect.TypeOf((*MockRepository)(nil).QuizRepository))
}

// MockQuizRepository is a mock of QuizRepository interface.
type MockQuizRepository struct {
	ctrl     *gomock.Controller
	recorder *MockQuizRepositoryMockRecorder
}

// MockQuizRepositoryMockRecorder is the mock recorder for MockQuizRepository.
type MockQuizRepositoryMockRecorder struct {
	mock *MockQuizRepository
}

// NewMockQuizRepository creates a new mock instance.
func NewMockQuizRepository(ctrl *gomock.Controller) *MockQuizRepository {
	mock := &MockQuizRepository{ctrl: ctrl}
	mock.recorder = &MockQuizRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuizRepository) EXPECT() *MockQuizRepositoryMockRecorder {
	return m.recorder
}

// GetQuiz mocks base method.
func (m *MockQuizRepository) GetQuiz(arg0 context.Context) (*quiz.Quiz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuiz", arg0)
	ret0, _ := ret[0].(*quiz.Quiz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuiz indicates an expected call of GetQuiz.
func (mr *MockQuizRepositoryMockRecorder) GetQuiz(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuiz", reflect.TypeOf((*MockQuizRepository)(nil).GetQuiz), arg0)
}

// GetResults mocks base method.
func (m *MockQuizRepository) GetResults(arg0 context.Context) ([]quiz.QuizResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResults", arg0)
	ret0, _ := ret[0].([]quiz.QuizResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResults indicates an expected call of GetResults.
func (mr *MockQuizRepositoryMockRecorder) GetResults(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResults", reflect.TypeOf((*MockQuizRepository)(nil).GetResults), arg0)
}

// SaveResult mocks base method.
func (m *MockQuizRepository) SaveResult(arg0 context.Context, arg1 quiz.QuizResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveResult", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveResult indicates an expected call of SaveResult.
func (mr *MockQuizRepositoryMockRecorder) SaveResult(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveResult", reflect.TypeOf((*MockQuizRepository)(nil).SaveResult), arg0, arg1)
}

// SetQuiz mocks base method.
func (m *MockQuizRepository) SetQuiz(arg0 context.Context, arg1 *quiz.Quiz) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetQuiz", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetQuiz indicates an expected call of SetQuiz.
func (mr *MockQuizRepositoryMockRecorder) SetQuiz(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQuiz", reflect.TypeOf((*MockQuizRepository)(nil).SetQuiz), arg0, arg1)
}
