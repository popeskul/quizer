// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/popeskul/quizer/internal/core/ports (interfaces: UseCases,QuizUseCase)
//
// Generated by this command:
//
//	mockgen -destination=usecases_mock.go -package=ports github.com/popeskul/quizer/internal/core/ports UseCases,QuizUseCase
//

// Package ports is a generated GoMock package.
package ports

import (
	context "context"
	reflect "reflect"

	quiz "github.com/popeskul/quizer/internal/core/domain/quiz"
	gomock "go.uber.org/mock/gomock"
)

// MockUseCases is a mock of UseCases interface.
type MockUseCases struct {
	ctrl     *gomock.Controller
	recorder *MockUseCasesMockRecorder
}

// MockUseCasesMockRecorder is the mock recorder for MockUseCases.
type MockUseCasesMockRecorder struct {
	mock *MockUseCases
}

// NewMockUseCases creates a new mock instance.
func NewMockUseCases(ctrl *gomock.Controller) *MockUseCases {
	mock := &MockUseCases{ctrl: ctrl}
	mock.recorder = &MockUseCasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCases) EXPECT() *MockUseCasesMockRecorder {
	return m.recorder
}

// QuizUseCases mocks base method.
func (m *MockUseCases) QuizUseCases() QuizUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuizUseCases")
	ret0, _ := ret[0].(QuizUseCase)
	return ret0
}

// QuizUseCases indicates an expected call of QuizUseCases.
func (mr *MockUseCasesMockRecorder) QuizUseCases() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuizUseCases", reflect.TypeOf((*MockUseCases)(nil).QuizUseCases))
}

// MockQuizUseCase is a mock of QuizUseCase interface.
type MockQuizUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockQuizUseCaseMockRecorder
}

// MockQuizUseCaseMockRecorder is the mock recorder for MockQuizUseCase.
type MockQuizUseCaseMockRecorder struct {
	mock *MockQuizUseCase
}

// NewMockQuizUseCase creates a new mock instance.
func NewMockQuizUseCase(ctrl *gomock.Controller) *MockQuizUseCase {
	mock := &MockQuizUseCase{ctrl: ctrl}
	mock.recorder = &MockQuizUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuizUseCase) EXPECT() *MockQuizUseCaseMockRecorder {
	return m.recorder
}

// GetQuiz mocks base method.
func (m *MockQuizUseCase) GetQuiz(arg0 context.Context) (*quiz.Quiz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuiz", arg0)
	ret0, _ := ret[0].(*quiz.Quiz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuiz indicates an expected call of GetQuiz.
func (mr *MockQuizUseCaseMockRecorder) GetQuiz(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuiz", reflect.TypeOf((*MockQuizUseCase)(nil).GetQuiz), arg0)
}

// SubmitAnswers mocks base method.
func (m *MockQuizUseCase) SubmitAnswers(arg0 context.Context, arg1 map[string]string) (quiz.QuizResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitAnswers", arg0, arg1)
	ret0, _ := ret[0].(quiz.QuizResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitAnswers indicates an expected call of SubmitAnswers.
func (mr *MockQuizUseCaseMockRecorder) SubmitAnswers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitAnswers", reflect.TypeOf((*MockQuizUseCase)(nil).SubmitAnswers), arg0, arg1)
}
